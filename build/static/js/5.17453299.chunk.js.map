{"version":3,"sources":["app/modules/managekeywords/keywordlist.js","app/modules/managekeywords/createkeywordform.js","app/modules/managekeywords/keywordspage.js"],"names":["dataTable","CreateKeywordForm","props","context","state","formEntity","parentRef","paramObj","name","formValidated","loading","this","showListView","Utils","_that","_state","setState","CRUD","Commodity_commodities","response","console","log","data","id","loadGrid","Form","noValidate","validated","className","type","value","onChange","e","required","date","placeholder","onClick","cancelForm","submitForm","React","Component","Spinner","style","position","top","left","transform","paddingTop","color","KeyWordList","handlePageClick","selectedPage","selected","offset","limit","url","perPage","currentPage","showUsersList","entityName","heading","List","isdataLoading","isLoading","count","getMoreUrl","startingPoint","loadingStatus","status","message","flag","that","JQUERY","DataTable","responsive","columnDefs","responsivePriority","targets","results","length","pageCount","Math","ceil","user","Keyword_Delete","row","remove","draw","edit","undefined","animationIn","animationOut","isVisible","map","item","index","key","align","Date","created","toLocaleDateString","colSpan","display","justifyContent","alignItems","flexDirection","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","KeywordsPage"],"mappings":"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","file":"static/js/5.17453299.chunk.js","sourcesContent":["import React from \"react\";\n// var $  = require( 'jquery' );\nimport JQUERY from \"jquery\";\nimport { Animated } from \"react-animated-css\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport CreateKeywordForm from \"./createkeywordform\";\nimport * as CRUD from \"../../Common/CRUD\";\nimport * as Utils from \"../../Common/Common\";\nimport { isNull } from \"lodash\";\nimport App from \"../../../_metronic/_partials/Pagination/App\";\nimport ReactPaginate from \"react-paginate\";\n\nimport { InfinitySpin } from \"react-loader-spinner\";\nlet dataTable;\nconst Spinner = () => (\n  <>\n    <div\n      style={{\n        position: \"fixed\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        paddingTop: \"100px\",\n      }}\n    >\n      <br />\n      <br />\n      <br />\n      <br />\n      <InfinitySpin\n        // width='460'\n        color=\"#6ee7b7\"\n      />\n    </div>\n  </>\n);\nexport default class KeyWordList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      showUsersList: true,\n      entityName: \"Commodity\",\n      heading: \"Commodities\",\n      paramObj: {},\n      List: [],\n      isdataLoading: false,\n      isLoading: true,\n      // for pagination\n      offset: 0,\n      count: 0,\n      limit: 20,\n      getMoreUrl: \"\",\n      currentPage: 0,\n      startingPoint: 1,\n      loadingStatus: { status: true, message: \"Loading ...\" },\n    };\n  }\n  handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * this.state.limit;\n    let url = `commodities/?limit=${this.state.limit}&offset=${offset}`;\n    this.loadGrid(null, url, selectedPage);\n  };\n\n  componentDidMount() {\n    this.loadGrid(null, CRUD.APIRoutes.Commodity_commodities);\n  }\n\n  showListView(flag, heading, that) {\n    that = that ?? this;\n    let _state = that.state;\n    _state.showUsersList = flag;\n    _state.heading = heading;\n    that.setState(_state, function() {\n      if (flag) {\n        //  that.initializeDT();\n      }\n    });\n  }\n\n  initializeDT() {\n    dataTable = JQUERY(\"#List\").DataTable({\n      responsive: true,\n      columnDefs: [\n        { responsivePriority: 1, targets: 0 },\n        { responsivePriority: 2, targets: -1 },\n      ],\n    });\n  }\n\n  loadGrid(_that, url, selectedPage = 0) {\n    _that = _that ?? this;\n    let _state = _that.state;\n    _state.List = [];\n    _state.isLoading = true;\n    _state.isdataLoading = true;\n    _state.loadingStatus = {\n      status: true,\n      message: \"Loading ...\",\n    };\n    CRUD.getRequest(url, function(response) {\n      if (response?.data?.results?.length > 0) {\n        let _state = _that.state;\n        _state.List = response.data.results;\n        _state.isdataLoading = false;\n        _state.offset = selectedPage;\n        _state.isLoading = false;\n        _state.pageCount = Math.ceil(response?.data.count / _state.limit);\n        _state.count = response?.data.count;\n\n        _state.isLoading = false;\n        _state.loadingStatus = { status: true, message: \"\" };\n        _state.showUsersList = true;\n        _that.setState(_state, function() {});\n      } // Api Exception\n      else {\n        let _state = _that.state;\n        _state.List = [];\n        _state.isdataLoading = false;\n        _state.isLoading = false;\n        _state.loadingStatus = { status: false, message: \"\" };\n        _that.setState(_state);\n      }\n    });\n  }\n\n  handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * this.state.perPage;\n\n    this.setState(\n      {\n        currentPage: selectedPage,\n        offset: offset,\n      },\n      () => {\n        this.loadGrid();\n      }\n    );\n  };\n\n  edit(user) {\n    let _state = this.state;\n    _state.paramObj = user;\n    this.setState(_state);\n    this.showListView(\n      false,\n      user\n        ? `Edit ${this.state.entityName}`\n        : `Add New ${this.state.entityName}`\n    );\n  }\n  delete(id) {\n    let _that = this;\n    Utils.showConfirmation(\n      `Do you want to delete this ${this.state.entityName}?`,\n      \"Are you sure?\",\n      () => {\n        CRUD.deleteRequest(CRUD.SalesPingAPIRoutes.Keyword_Delete, id, function(\n          response\n        ) {\n          if (response?.data) {\n            Utils.showDeleteAlert(_that.state.entityName);\n            let _state = _that.state;\n            _state.List = Utils.removeElementFromArray(_state.List, \"id\", id);\n            _that.setState(_state, function() {\n              dataTable\n                .row(JQUERY(\"#row_\" + id)[0])\n                .remove()\n                .draw();\n            });\n          }\n        });\n      },\n      null\n    );\n  }\n\n  render() {\n    const { isdataLoading, List } = this.state;\n\n    return (\n      <div className=\"card card-custom\">\n        <div className=\"card-header\">\n          <div className=\"card-title\">\n            <h3 className=\"card-label font-weight-bolder text-dark\">\n              {this.state.heading}\n            </h3>\n          </div>\n          <div className=\"card-toolbar\">\n            {this.state.showUsersList && (\n              <button\n                onClick={() => this.edit(undefined)}\n                type=\"button\"\n                className=\"btn btn-success btn-sm\"\n              >\n                <i className=\"fa fa-plus\"></i> Create New{\" \"}\n                {this.state.entityName}\n              </button>\n            )}\n\n            {!this.state.showUsersList && (\n              <button\n                onClick={() =>\n                  this.showListView(!this.state.showUsersList, \"Commodities\")\n                }\n                type=\"button\"\n                className=\"btn btn-dark btn-sm\"\n              >\n                <i className=\"fa fa-arrow-left\"></i> Back To List\n              </button>\n            )}\n          </div>\n        </div>\n        <div className=\"card-body\">\n          {this.state.isLoading && this.state.showUsersList\n            ? \"Loading ...\"\n            : this.state.showUsersList && (\n                <Animated\n                  animationIn=\"bounceInLeft\"\n                  animationOut=\"fadeOut\"\n                  isVisible={true}\n                >\n                  {isdataLoading ? (\n                    <Spinner />\n                  ) : (\n                    <div>\n                      <table\n                        id=\"List\"\n                        className=\"table table-sm table-hover table-striped table-bordered w-100\"\n                      >\n                        <thead className=\"bg-custom text-white\">\n                          <tr>\n                            {/* <th>\n                          <i className=\"fa fa-list-ol mr-1\"></i> No.\n                        </th> */}\n                            <th>\n                              <i className=\"fa fa-clipboard-list mr-1\"></i> Name\n                            </th>\n                            <th className=\"text-center\">\n                              <i className=\"fa fa-calendar-alt mr-1\"></i>{\" \"}\n                              Created Date\n                            </th>\n                            {/* <th className=\"text-center\">\n                          <i className=\"fa fa-check-circle mr-1\"></i> Active\n                        </th>\n                        <th className=\"text-center\">\n                          <i className=\"fa fa-bolt mr-1\"></i> Action\n                        </th> */}\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {this.state.List != null &&\n                          this.state.List.length > 0 ? (\n                            this.state.List.map((item, index) => (\n                              <tr key={index} id={`row_${item.id}`}>\n                                {/* <td>{item.id}</td> */}\n                                <td>{item.name}</td>\n                                <td align=\"center\">\n                                  {new Date(item.created).toLocaleDateString()}\n                                </td>\n                                {/* <td align=\"center\">\n                              <div className=\"custom-control custom-switch\">\n                                <input\n                                  type=\"checkbox\"\n                                  defaultChecked={item.active}\n                                  className=\"custom-control-input\"\n                                  id={\"activeSwitch\" + index}\n                                  readOnly={true}\n                                />\n                                <label\n                                  className=\"custom-control-label\"\n                                  htmlFor={\"activeSwitch\" + index}\n                                ></label>\n                              </div>\n                            </td>\n                            <td align=\"center\">\n                              <OverlayTrigger\n                                placement=\"top\"\n                                overlay={<Tooltip> Edit </Tooltip>}\n                              >\n                                <button\n                                  onClick={() => this.edit(item)}\n                                  className=\"btn btn-xs btn-icon btn-outline-primary\"\n                                >\n                                  <i className=\"fa fa-pen\"></i>\n                                </button>\n                              </OverlayTrigger>\n                              <OverlayTrigger\n                                placement=\"top\"\n                                overlay={<Tooltip> Delete </Tooltip>}\n                              >\n                                <button\n                                  onClick={() => this.delete(item.id)}\n                                  className=\"btn btn-xs btn-icon btn-outline-danger ml-3\"\n                                >\n                                  <i className=\"fa fa-trash-alt\"></i>\n                                </button>\n                              </OverlayTrigger>\n                            </td> */}\n                              </tr>\n                            ))\n                          ) : (\n                            <tr>\n                              <td\n                                colSpan=\"5\"\n                                className=\"text-center text-danger\"\n                              >\n                                {\" \"}\n                                <h5>No Data Available</h5>{\" \"}\n                              </td>\n                            </tr>\n                          )}\n                        </tbody>\n                      </table>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                          alignItems: \"center\",\n                          flexDirection: \"row\",\n                        }}\n                      >\n                        <div>\n                          {this.state.offset * this.state.limit +\n                            this.state.limit >\n                          this.state.count ? (\n                            <span>\n                              {\" \"}\n                              Showing{\" \"}\n                              {this.state.offset * this.state.limit +\n                                this.state.startingPoint}{\" \"}\n                              to {this.state.count} from {this.state.count}\n                            </span>\n                          ) : (\n                            <span>\n                              {\" \"}\n                              Showing{\" \"}\n                              {this.state.offset * this.state.limit +\n                                this.state.startingPoint}{\" \"}\n                              to{\" \"}\n                              {this.state.offset * this.state.limit +\n                                this.state.limit}{\" \"}\n                              from {this.state.count}{\" \"}\n                            </span>\n                          )}\n                        </div>\n                        <div>\n                          <ReactPaginate\n                            previousLabel={\"prev\"}\n                            nextLabel={\"next\"}\n                            breakLabel={\"...\"}\n                            breakClassName={\"break-me\"}\n                            pageCount={this.state.pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={this.handlePageClick}\n                            containerClassName={\"pagination\"}\n                            subContainerClassName={\"pages pagination\"}\n                            activeClassName={\"active\"}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Animated>\n              )}\n\n          {!this.state.showUsersList && (\n            <Animated\n              animationIn=\"bounceInLeft\"\n              animationOut=\"fadeOut\"\n              isVisible={true}\n            >\n              {/* form for creating new commodity */}\n              <CreateKeywordForm parentRef={this} />\n            </Animated>\n          )}\n        </div>\n\n        {/* ggggg */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport * as Utils from \"../../Common/Common\";\nimport { Form } from \"react-bootstrap\";\nimport * as CRUD from \"../../Common/CRUD\";\n\nexport default class CreateKeywordForm extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      formEntity: props.parentRef.state.paramObj ?? { name: \"\" },\n      formValidated: false,\n      loading: false,\n    };\n  }\n\n  componentDidMount() {}\n\n  cancelForm() {\n    this.props.parentRef.showListView(\n      true,\n      // this.props.parentRef.state.paramObj.entityName + \"s\",\n      // this.props.parentRef\n    );\n  }\n  submitForm() {\n    if (Utils.validateForm(\"formEntity\", this)) {\n      let _that = this;\n      let _state = _that.state;\n      _state.loading = true;\n      _that.setState(_state);\n      CRUD.postRequest(\n        CRUD.APIRoutes.Commodity_commodities,\n        this.state.formEntity,\n        function(response) {\n          console.log(\" response is: \"+ response)\n          // //debugger;\n          if (response?.data?.id != null) {\n            _that.props.parentRef.loadGrid(_that.props.parentRef,\"commodities/\");\n            Utils.showUpsertAlert(\n             \" Commodity\",\n              false\n            );\n          }\n          _state.loading = false;\n          _that.setState(_state);\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        noValidate\n        validated={this.state.formValidated}\n        id=\"formEntity\"\n        className=\"needs-validation\"\n      >\n        <div className=\"row \" id=\"container\">\n          <div className=\"col-lg-4 form-group\">\n            <label className=\"form-label\">\n              Name<span className=\"text-danger\"> *</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"form-control form-control-sm fs-md\"\n              value={this.state.formEntity.name}\n              onChange={(e) =>\n                Utils.updateInputValueInState(\n                  this.state.formEntity,\n                  e,\n                  this,\n                  this.state\n                )\n              }\n              required\n            />\n\n{/* for taking date input */}\n{/* <div className=\" col-lg-4  form-group\"> */}\n  \n\n<label className=\"form-label\" >Date <span className=\"text-danger\"> *</span>  </label>\n{/* input form */}\n<input type=\"date\"\nid=\"keywordText\" name=\"keywordText\" className=\"form-control form-control-sm fs-md\"\nvalue={this.state.formEntity.date}\nplaceholder={this.state.formEntity.date}\nonChange={e => Utils.updateInputValueInState(this.state.formEntity, e, this, this.state)}\nrequired />\n{/* </div> */}\n          </div>\n        </div>\n\n        <div className=\"d-flex justify-content-end mt-10\">\n          <button\n            type=\"button\"\n            id=\"btnCloseUserModal\"\n            onClick={() => this.cancelForm()}\n            className=\"btn btn-sm btn-danger mr-5\"\n          >\n            {\" \"}\n            <span className=\"fa fa-times\"></span> Close\n          </button>\n          <button\n            type=\"button\"\n            id=\"btnSaveUser\"\n            onClick={() => this.submitForm()}\n            className=\"btn btn-sm btn-success\"\n          >\n            {\" \"}\n            {!this.state.loading && <span className=\"fa fa-save\"></span>}\n            {this.state.loading && (\n              <span className=\"ml-3 spinner spinner-white\"></span>\n            )}{\" \"}\n            Save\n          </button>\n        </div>\n      </Form>\n    );\n  }\n}\n","import React from \"react\";\nimport KeywordList from \"./keywordlist\"\n\n\nexport default function KeywordsPage() {\n    return (\n        <KeywordList />\n    )\n}"],"sourceRoot":""}